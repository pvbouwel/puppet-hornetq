#!/bin/sh
#
# script for starting/stopping the HornetQ standalone server
# This comes from http://www.jbint.de/?p=136
#
### BEGIN INIT INFO
# Provides:          hornetq
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable hornetq service.
### END INIT INFO
# chkconfig: 2345 20 80
# description: Enable hornetq service
INSTANCE_NAME=<%= @instancename %>
NAME=hornet_${INSTANCE_NAME}
USER=<%= @owner %>
DAEMON_PATH=<%= @_instancedir %>/bin
PID=$NAME
PIDFILE=/var/run/$NAME.pid
LOGFILE="<%= @_logdir %>/<%= @_logfile %>"

if [ 0 -ne 0 ]; then
   echo "You need root privileges to run this script"
   exit 1
fi

function set_nr_processes() {
  NR_PROCESSES=`ps -ef | grep $INSTANCE_NAME | grep $USER | grep java | grep -v grep | wc -l`
}

function set_pid() {
  PROCESS=`ps -ef | grep $INSTANCE_NAME | grep $USER | grep java | grep -v grep`
  PID=`echo $PROCESS | awk '{ print $2 }'`
}

function write_pidfile() {
  set_pid
  echo $PID > "$1"
}

function report_not_running() {
  echo "Not running" && exit 1
}

function report_running() {
  echo "Running" && exit 0
}

#Return 0 if hornetQ is live
function is_started_succesfully() {
  tail -n 10000 "${LOGFILE}" | grep "Server is now live" &>/dev/null
  result="$?"
  return "$result"
}

function rotate_log() {
  if [ -f "${LOGFILE}" ]
  then
    mv "${LOGFILE}"{,`date +%H%M%S_%d%m%Y`}
  fi
}
  
#if process is running return 0 otherwise 1
function is_pidfile_process_running() {
  PID=`cat "$1"`
  ps -ef | awk '{ print $2 }' | grep "$PID" &> /dev/null
  return $?
}

# if process is running return 0 otherwise 1
function is_process_running() {
  set_nr_processes
  if [ "$NR_PROCESSES" = "1" ]
  then
    return 0
  else
    return 1             
  fi
}

case "$1" in
   start)
     echo -n "Starting $NAME..."
     rotate_log
     /bin/su $USER -c $DAEMON_PATH/run.sh &>/dev/null
     sleep 1
     set_nr_processes
     if [ ! "$NR_PROCESSES" = "1" ]
     then
       echo "WARNING"
       echo ""
       echo "Number of processes returned by grep is different from 1 (${NR_PROCESSES})."
       echo "Therefore PID file cannot be stored correclty. Check if Hornet is started."
       exit 4
     else
       write_pidfile "$PIDFILE"
       counter=0
       timeout=120
       while [ "1" = "1" ]
       do
         is_started_succesfully
         if [ "$?" = "0" ]
         then
           echo "Ok"
           exit 0 
         else
           if [ "$counter" = "$timeout" ]
           then
             echo "Timed out"
             echo "Killing process (`cat $PIDFILE`) because HornetQ was not live before timeout" >> "${LOGFILE}"
             kill `cat $PIDFILE`
             rm $PIDFILE
             exit 1
           else
             echo -n "."
             sleep 1
             counter=$((counter+1))
           fi
         fi
       done
       end
     fi
     ;;
  status)
    printf "%-50s" "Checking $NAME..."
    if [ -f $PIDFILE ]; 
    then
      is_pidfile_process_running "$PIDFILE"
      RESULT=$?
    else
      is_process_running
      RESULT=$?
    fi
    if [ "$RESULT" = "0" ]
    then
      report_running
    else
      report_not_running
    fi
    ;;
  stop)
    printf "%-50s" "Stopping $NAME"
    set_nr_processes
    if [ "$NR_PROCESSES" = "1" ]
    then
      /bin/su $USER -c $DAEMON_PATH/stop.sh &>/dev/null
      echo "Ok"
      if [ -f $PIDFILE ]; then
        rm -f $PIDFILE
      else
        echo ""
        echo "pidfile was not found -> not cleaned up"
      fi
      exit 0
    else
      echo "Failed" 
    fi      
    ;;
  restart)
    $0 stop
    $0 start
    ;;
  *)
  echo "Usage: $0 {status|start|stop|restart}"
  exit 1
esac

<%# Just a comment at the bottom of the template %>